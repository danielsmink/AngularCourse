"use strict";var INTEGER_REGEXP=/^\-?\d+$/,FLOAT_REGEXP=/^\-?\d+((\.|\,)\d+)?$/;angular.module("waitstaff",["ngRoute"]).constant("VERSION","1.1").run(["VERSION","$rootScope",function(e,t){t.version=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"./home.html"}).when("/new-meal",{templateUrl:"./new-meal.html"}).when("/my-earnings",{templateUrl:"./my-earnings.html"}).when("/error",{template:"<p>Error Page Not Found</p>"}).otherwise({redirectTo:"/error"})}]).controller("waitstaffController",["$scope",function(e){e.errorMessage=!1,e.formValid=!1,e.chargeSubtotal=0,e.chargeTip=0,e.chargeTotal=0,e.tipTotal=0,e.mealCount=0,e.avgTip=0,e.validate=function(){e.mealForm.$valid?(e.chargeSubtotal=e.meal.baseprice*(1+e.meal.taxrate/100),e.chargeTip=e.chargeSubtotal*(e.meal.tippercentage/100),e.chargeTotal=e.chargeSubtotal+e.chargeTip,e.tipTotal=e.tipTotal+e.chargeTip,e.mealCount=e.mealCount+1,e.avgTip=e.tipTotal/e.mealCount,e.meal=null):e.errorMessage="Please fill in all the fields"},e.cancelMeal=function(){e.formValid=!1,e.errorMessage=!1,e.meal=null},e.resetApp=function(){e.formValid=!1,e.errorMessage=!1,e.meal=null,e.chargeSubtotal=0,e.chargeTip=0,e.chargeTotal=0,e.tipTotal=0,e.mealCount=0,e.avgTip=0}}]).directive("integer",function(){return{require:"ngModel",link:function(e,t,a,r){r.$parsers.unshift(function(e){return INTEGER_REGEXP.test(e)?(r.$setValidity("integer",!0),e):void r.$setValidity("integer",!1)})}}}).directive("smartFloat",function(){return{require:"ngModel",link:function(e,t,a,r){r.$parsers.unshift(function(e){return FLOAT_REGEXP.test(e)?(r.$setValidity("float",!0),parseFloat(e.replace(",","."))):void r.$setValidity("float",!1)})}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyJhcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQSxJQUFBLGdCQUFBLFdBQ0EsYUFBQSx1QkFFQSxTQUFBLE9BQUEsYUFBQSxZQUNBLFNBQUEsVUFBQSxPQUNBLEtBQUEsVUFBQSxhQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsUUFBQSxLQUVBLFFBQUEsaUJBQUEsU0FBQSxHQUNBLEVBQUEsS0FBQSxLQUNBLFlBQUEsZ0JBRUEsS0FBQSxhQUNBLFlBQUEsb0JBRUEsS0FBQSxnQkFDQSxZQUFBLHVCQUVBLEtBQUEsVUFDQSxTQUFBLGdDQUVBLFdBQ0EsV0FBQSxjQUdBLFdBQUEsdUJBQUEsU0FBQSxTQUFBLEdBR0EsRUFBQSxjQUFBLEVBQ0EsRUFBQSxXQUFBLEVBRUEsRUFBQSxlQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxZQUFBLEVBQ0EsRUFBQSxTQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxPQUFBLEVBR0EsRUFBQSxTQUFBLFdBRUEsRUFBQSxTQUFBLFFBQ0EsRUFBQSxlQUFBLEVBQUEsS0FBQSxXQUFBLEVBQUEsRUFBQSxLQUFBLFFBQUEsS0FDQSxFQUFBLFVBQUEsRUFBQSxnQkFBQSxFQUFBLEtBQUEsY0FBQSxLQUNBLEVBQUEsWUFBQSxFQUFBLGVBQUEsRUFBQSxVQUdBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxVQUNBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFDQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsVUFHQSxFQUFBLEtBQUEsTUFFQSxFQUFBLGFBQUEsaUNBS0EsRUFBQSxXQUFBLFdBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxjQUFBLEVBQ0EsRUFBQSxLQUFBLE1BSUEsRUFBQSxTQUFBLFdBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxjQUFBLEVBQ0EsRUFBQSxLQUFBLEtBQ0EsRUFBQSxlQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxZQUFBLEVBQ0EsRUFBQSxTQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxPQUFBLE1BSUEsVUFBQSxVQUFBLFdBQ0EsT0FDQSxRQUFBLFVBQ0EsS0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxTQUFBLFFBQUEsU0FBQSxHQUNBLE1BQUEsZ0JBQUEsS0FBQSxJQUVBLEVBQUEsYUFBQSxXQUFBLEdBQ0EsT0FHQSxHQUFBLGFBQUEsV0FBQSxTQVFBLFVBQUEsYUFBQSxXQUNBLE9BQ0EsUUFBQSxVQUNBLEtBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxRQUFBLFNBQUEsR0FDQSxNQUFBLGNBQUEsS0FBQSxJQUNBLEVBQUEsYUFBQSxTQUFBLEdBQ0EsV0FBQSxFQUFBLFFBQUEsSUFBQSxXQUVBLEdBQUEsYUFBQSxTQUFBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSU5URUdFUl9SRUdFWFAgPSAvXlxcLT9cXGQrJC8sXG4gIEZMT0FUX1JFR0VYUCA9IC9eXFwtP1xcZCsoKFxcLnxcXCwpXFxkKyk/JC87XG5cbmFuZ3VsYXIubW9kdWxlKCd3YWl0c3RhZmYnLCBbJ25nUm91dGUnXSlcbiAgLmNvbnN0YW50KCdWRVJTSU9OJywgJzEuMScpXG4gIC5ydW4oZnVuY3Rpb24oVkVSU0lPTiwgJHJvb3RTY29wZSl7XG4gICAgJHJvb3RTY29wZS52ZXJzaW9uID0gVkVSU0lPTjtcbiAgfSlcbiAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcil7XG4gICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsIHtcbiAgICAgIHRlbXBsYXRlVXJsIDogJy4vaG9tZS5odG1sJ1xuICAgIH0pXG4gICAgLndoZW4oJy9uZXctbWVhbCcsIHtcbiAgICAgIHRlbXBsYXRlVXJsIDogJy4vbmV3LW1lYWwuaHRtbCdcbiAgICB9KVxuICAgIC53aGVuKCcvbXktZWFybmluZ3MnLCB7XG4gICAgICB0ZW1wbGF0ZVVybCA6ICcuL215LWVhcm5pbmdzLmh0bWwnXG4gICAgfSlcbiAgICAud2hlbignL2Vycm9yJywge1xuICAgICAgdGVtcGxhdGUgOiAnPHA+RXJyb3IgUGFnZSBOb3QgRm91bmQ8L3A+J1xuICAgIH0pXG4gICAgLm90aGVyd2lzZSh7XG4gICAgICByZWRpcmVjdFRvIDogJy9lcnJvcidcbiAgICB9KTtcbiAgfSlcbiAgLmNvbnRyb2xsZXIoJ3dhaXRzdGFmZkNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpe1xuXG4gICAgLy9Jbml0aWFsaXplIHNvbWUgdmFsdWVzXG4gICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9IGZhbHNlO1xuICAgICRzY29wZS5mb3JtVmFsaWQgPSBmYWxzZTtcblxuICAgICRzY29wZS5jaGFyZ2VTdWJ0b3RhbCA9IDA7XG4gICAgJHNjb3BlLmNoYXJnZVRpcCA9IDA7XG4gICAgJHNjb3BlLmNoYXJnZVRvdGFsID0gMDtcbiAgICAkc2NvcGUudGlwVG90YWwgPSAwO1xuICAgICRzY29wZS5tZWFsQ291bnQgPSAwO1xuICAgICRzY29wZS5hdmdUaXAgPSAwO1xuXG4gICAgLy9Gb3JtIHZhbGlkYXRpb24gYW5kIHZhbHVlIGhhbmRsaW5nXG4gICAgJHNjb3BlLnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAvL0Zvcm0gaXMgdmFsaWQgc28gd2UgY2FsY3VsYXRlIGFsbCB0aGUgdmFsdWVzIGZvciB0aGUgY3VzdG9tZXIgY2hhcmdlXG4gICAgICBpZigkc2NvcGUubWVhbEZvcm0uJHZhbGlkKSB7XG4gICAgICAgICRzY29wZS5jaGFyZ2VTdWJ0b3RhbCA9ICRzY29wZS5tZWFsLmJhc2VwcmljZSAqICgxICsgJHNjb3BlLm1lYWwudGF4cmF0ZSAvIDEwMCk7XG4gICAgICAgICRzY29wZS5jaGFyZ2VUaXAgPSAkc2NvcGUuY2hhcmdlU3VidG90YWwgKiAoJHNjb3BlLm1lYWwudGlwcGVyY2VudGFnZSAvIDEwMCk7XG4gICAgICAgICRzY29wZS5jaGFyZ2VUb3RhbCA9ICRzY29wZS5jaGFyZ2VTdWJ0b3RhbCArICRzY29wZS5jaGFyZ2VUaXA7XG5cbiAgICAgICAgLy8gU2V0IHRvdGFsc1xuICAgICAgICAkc2NvcGUudGlwVG90YWwgPSAkc2NvcGUudGlwVG90YWwgKyAkc2NvcGUuY2hhcmdlVGlwO1xuICAgICAgICAkc2NvcGUubWVhbENvdW50ID0gJHNjb3BlLm1lYWxDb3VudCArIDE7XG4gICAgICAgICRzY29wZS5hdmdUaXAgPSAkc2NvcGUudGlwVG90YWwgLyAkc2NvcGUubWVhbENvdW50O1xuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBtZWFsIGZvcm1cbiAgICAgICAgJHNjb3BlLm1lYWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdQbGVhc2UgZmlsbCBpbiBhbGwgdGhlIGZpZWxkcyc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vTWVhbCBmb3JtIHJlc2V0XG4gICAgJHNjb3BlLmNhbmNlbE1lYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5mb3JtVmFsaWQgPSBmYWxzZTtcbiAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICRzY29wZS5tZWFsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy9BcHBsaWNhdGlvbiByZXNldFxuICAgICRzY29wZS5yZXNldEFwcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmZvcm1WYWxpZCA9IGZhbHNlO1xuICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgJHNjb3BlLm1lYWwgPSBudWxsO1xuICAgICAgJHNjb3BlLmNoYXJnZVN1YnRvdGFsID0gMDtcbiAgICAgICRzY29wZS5jaGFyZ2VUaXAgPSAwO1xuICAgICAgJHNjb3BlLmNoYXJnZVRvdGFsID0gMDtcbiAgICAgICRzY29wZS50aXBUb3RhbCA9IDA7XG4gICAgICAkc2NvcGUubWVhbENvdW50ID0gMDtcbiAgICAgICRzY29wZS5hdmdUaXAgPSAwO1xuICAgIH07XG4gIH0pXG4gIC8vIERpcmVjdGl2ZSB0byB2YWxpZGF0ZSBpbnRlZ2VycyBzaGFtZWxlc3NseSBjb3BpZWQgZnJvbSB0aGUgQW51Z2xhckpTIGRvY3VtZW50YXRpb25cbiAgLmRpcmVjdGl2ZSgnaW50ZWdlcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICAgICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKElOVEVHRVJfUkVHRVhQLnRlc3Qodmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgLy8gaXQgaXMgdmFsaWRcbiAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdpbnRlZ2VyJywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmlld1ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdCBpcyBpbnZhbGlkLCByZXR1cm4gdW5kZWZpbmVkIChubyBtb2RlbCB1cGRhdGUpXG4gICAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnaW50ZWdlcicsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KVxuICAvLyBEaXJlY3RpdmUgdG8gdmFsaWRhdGUgZmxvYXRzIHNoYW1lbGVzc2x5IGNvcGllZCBmcm9tIHRoZSBBbnVnbGFySlMgZG9jdW1lbnRhdGlvblxuICAuZGlyZWN0aXZlKCdzbWFydEZsb2F0JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG4gICAgICAgIGN0cmwuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgICBpZiAoRkxPQVRfUkVHRVhQLnRlc3Qodmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ2Zsb2F0JywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2aWV3VmFsdWUucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnZmxvYXQnLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9